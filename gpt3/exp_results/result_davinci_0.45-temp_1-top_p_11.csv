,level,is_unique,is_playable
0,"##########
#-@#######
#-$#######
#--#######
#.#####-##
#-#####-##
#-########
#-########
#-########
##########",True,False
1,"Void

getMap :: Map. Map String String -> Map. Map String String

getMap = Map. lookup

-- | Set the value associated with the key @key@ to @value@.

--

-- > #set# ""foo"" ""bar""

-- > #set# ""baz"" $ Just ""quux""

-- > #set# ""baz"" $ Nothing

set :: String -> a -> Map. Map String a -> Map. Map String a

set key value m = Map. insertWith ( \ _ old -> old) key value m

-- | Update the value associated with the key @key@ to be @old@ if",True,False
2,"True

#-#-#-#-#

#-#-.-$-#

#-$---$-#

#-##--#-#

#-#####-#
#-#####-#
#--------#
##########",True,False
3,"##########
#--#--####
#-$----###
#-#--#####
#-$-######
#--#######
#.$#######
#--#######
#-@#######
##########",True,False
4,"HashMap. #-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-}

#-",True,False
5,"M.Map.Map Int (Maybe String)

-- | A map from 'Int' to 'Maybe String', with a default value of 'Nothing'

-- if the key is not present in the map.

--

-- Since: base-4.9.0.0

data M.Map.Map k v

-- $#map#

--

-- This is a 'Map' with a default value of 'Nothing' for keys that

-- are not present in the map.

--

-- Since: base-4.9.0.0

= M.empty

| M.singleton k v

| M.",True,False
6,"##########
#--#######
#-#-######
#-#-######
#--.######
#-$-######
#--$-#--##
#@$-.--.-#
##########",True,"[{'x': 1, 'y': 0}, {'x': 1, 'y': 0}, {'x': 1, 'y': 0}, {'x': 1, 'y': 0}, {'x': 1, 'y': 0}, {'x': -1, 'y': 0}, {'x': -1, 'y': 0}, {'x': -1, 'y': 0}, {'x': -1, 'y': 0}, {'x': 0, 'y': -1}, {'x': 0, 'y': -1}, {'x': -1, 'y': 0}, {'x': 0, 'y': -1}, {'x': 1, 'y': 0}, {'x': 0, 'y': 1}, {'x': 1, 'y': 0}, {'x': 0, 'y': 1}, {'x': -1, 'y': 0}, {'x': 0, 'y': 1}, {'x': 1, 'y': 0}]"
7,"True

let is_empty = function

| [ ] -> True

| _ -> False

let rec insert_min = function

| [ ] -> [ ]

| hd :: tl ->

if hd < tl. hd

then hd :: tl

else tl

let rec find_min = function

| [ ] -> raise Not_found

| hd :: tl ->

if hd < tl. hd

then Some ( hd, tl )

else find_min tl

let rec delete_min = function

| [ ] -> [ ]

|",True,False
8,"##########
#---######
#-$-######
#-.-######
#--#######
#---$@####
#-#-######
#-#-######
#--------#
##########",True,False
9,"##########
#-########
#--#######
#-#######@
#-$--$-#-#
#-#--#.-##
#-#-##--##
#--#######
#--###--##
##########",True,False
